{"version":3,"file":"convertToJson.js","names":["DEFAULT_OPTIONS","isColumnOriented","data","schema","options","rowMap","validateSchema","transpose","columns","results","errors","i","length","result","read","push","error","row","rows","rowIndex","object","key","schemaEntry","isNestedSchema","type","Array","isArray","rawValue","indexOf","undefined","value","reason","notEmpty","array","parseArray","map","_value","parseValue","required","column","prop","Object","keys","parse","parseCustomValue","parseValueOfType","oneOf","validate","message","String","isFinite","Number","Integer","stringifiedValue","isInteger","URL","isURL","Email","isEmail","Date","isNaN","date","parseDate","properties","Boolean","Error","name","getBlock","string","endCharacter","startIndex","substring","character","block","blocks","index","trim","_","entry"],"sources":["../../../source/read/schema/convertToJson.js"],"sourcesContent":["import parseDate from '../parseDate.js'\r\n\r\nimport Integer, { isInteger } from '../../types/Integer.js'\r\nimport URL, { isURL } from '../../types/URL.js'\r\nimport Email, { isEmail } from '../../types/Email.js'\r\n\r\nconst DEFAULT_OPTIONS = {\r\n  isColumnOriented: false\r\n}\r\n\r\n/**\r\n * Convert 2D array to nested objects.\r\n * If row oriented data, row 0 is dotted key names.\r\n * Column oriented data is transposed.\r\n * @param {any[][]} data - An array of rows, each row being an array of cells.\r\n * @param {object} schema\r\n * @return {object[]}\r\n */\r\nexport default function(data, schema, options) {\r\n  if (options) {\r\n    options = {\r\n      ...DEFAULT_OPTIONS,\r\n      ...options\r\n    }\r\n  } else {\r\n    options = DEFAULT_OPTIONS\r\n  }\r\n\r\n  const {\r\n    isColumnOriented,\r\n    rowMap\r\n  } = options\r\n\r\n  validateSchema(schema)\r\n\r\n  if (isColumnOriented) {\r\n    data = transpose(data)\r\n  }\r\n\r\n  const columns = data[0]\r\n\r\n  const results = []\r\n  const errors = []\r\n\r\n  for (let i = 1; i < data.length; i++) {\r\n    const result = read(schema, data[i], i - 1, columns, errors, options)\r\n    if (result) {\r\n      results.push(result)\r\n    }\r\n  }\r\n\r\n  // Correct error rows.\r\n  if (rowMap) {\r\n    for (const error of errors) {\r\n      // Convert the `row` index in `data` to the\r\n      // actual `row` index in the spreadsheet.\r\n      // The `1` compensates for the header row.\r\n      error.row = rowMap[error.row] + 1\r\n    }\r\n  }\r\n\r\n  return {\r\n    rows: results,\r\n    errors\r\n  }\r\n}\r\n\r\nfunction read(schema, row, rowIndex, columns, errors, options) {\r\n  const object = {}\r\n  for (const key of Object.keys(schema)) {\r\n    const schemaEntry = schema[key]\r\n    const isNestedSchema = typeof schemaEntry.type === 'object' && !Array.isArray(schemaEntry.type)\r\n    let rawValue = row[columns.indexOf(key)]\r\n    if (rawValue === undefined) {\r\n      rawValue = null\r\n    }\r\n    let value\r\n    let error\r\n    let reason\r\n    if (isNestedSchema) {\r\n      value = read(schemaEntry.type, row, rowIndex, columns, errors, options)\r\n    } else {\r\n      if (rawValue === null) {\r\n        value = null\r\n      }\r\n      else if (Array.isArray(schemaEntry.type)) {\r\n        let notEmpty = false\r\n        const array = parseArray(rawValue).map((_value) => {\r\n          const result = parseValue(_value, schemaEntry, options)\r\n          if (result.error) {\r\n            value = _value\r\n            error = result.error\r\n            reason = result.reason\r\n          }\r\n          if (result.value !== null) {\r\n            notEmpty = true\r\n          }\r\n          return result.value\r\n        })\r\n        if (!error) {\r\n          value = notEmpty ? array : null\r\n        }\r\n      } else {\r\n        const result = parseValue(rawValue, schemaEntry, options)\r\n        error = result.error\r\n        reason = result.reason\r\n        value = error ? rawValue : result.value\r\n      }\r\n    }\r\n    if (!error && value === null && schemaEntry.required) {\r\n      error = 'required'\r\n    }\r\n    if (error) {\r\n      error = {\r\n        error,\r\n        row: rowIndex + 1,\r\n        column: key,\r\n        value\r\n      }\r\n      if (reason) {\r\n        error.reason = reason\r\n      }\r\n      if (schemaEntry.type) {\r\n        error.type = schemaEntry.type\r\n      }\r\n      errors.push(error)\r\n    } else if (value !== null) {\r\n      object[schemaEntry.prop] = value\r\n    }\r\n  }\r\n  if (Object.keys(object).length > 0) {\r\n    return object\r\n  }\r\n  return null\r\n}\r\n\r\n/**\r\n * Converts textual value to a javascript typed value.\r\n * @param  {any} value\r\n * @param  {object} schemaEntry\r\n * @return {{ value: any, error: string }}\r\n */\r\nexport function parseValue(value, schemaEntry, options) {\r\n  if (value === null) {\r\n    return { value: null }\r\n  }\r\n  let result\r\n  if (schemaEntry.parse) {\r\n    result = parseCustomValue(value, schemaEntry.parse)\r\n  } else if (schemaEntry.type) {\r\n    result = parseValueOfType(\r\n      value,\r\n      // Supports parsing array types.\r\n      // See `parseArray()` function for more details.\r\n      // Example `type`: String[]\r\n      // Input: 'Barack Obama, \"String, with, colons\", Donald Trump'\r\n      // Output: ['Barack Obama', 'String, with, colons', 'Donald Trump']\r\n      Array.isArray(schemaEntry.type) ? schemaEntry.type[0] : schemaEntry.type,\r\n      options\r\n    )\r\n  } else {\r\n    result = { value: value }\r\n    // throw new Error('Invalid schema entry: no .type and no .parse():\\n\\n' + JSON.stringify(schemaEntry, null, 2))\r\n  }\r\n  // If errored then return the error.\r\n  if (result.error) {\r\n    return result\r\n  }\r\n  if (result.value !== null) {\r\n    if (schemaEntry.oneOf && schemaEntry.oneOf.indexOf(result.value) < 0) {\r\n      return { error: 'invalid', reason: 'unknown' }\r\n    }\r\n    if (schemaEntry.validate) {\r\n      try {\r\n        schemaEntry.validate(result.value)\r\n      } catch (error) {\r\n        return { error: error.message }\r\n      }\r\n    }\r\n  }\r\n  return result\r\n}\r\n\r\n/**\r\n * Converts textual value to a custom value using supplied `.parse()`.\r\n * @param  {any} value\r\n * @param  {function} parse\r\n * @return {{ value: any, error: string }}\r\n */\r\nfunction parseCustomValue(value, parse) {\r\n  try {\r\n    value = parse(value)\r\n    if (value === undefined) {\r\n      return { value: null }\r\n    }\r\n    return { value }\r\n  } catch (error) {\r\n    return { error: error.message }\r\n  }\r\n}\r\n\r\n/**\r\n * Converts textual value to a javascript typed value.\r\n * @param  {any} value\r\n * @param  {} type\r\n * @return {{ value: (string|number|Date|boolean), error: string, reason?: string }}\r\n */\r\nfunction parseValueOfType(value, type, options) {\r\n  switch (type) {\r\n    case String:\r\n      if (typeof value === 'string') {\r\n        return { value }\r\n      }\r\n      // Excel tends to perform a forced automatic convertion of string-type values\r\n      // to number-type ones when the user has input them. Otherwise, users wouldn't\r\n      // be able to perform formula calculations on those cell values because users\r\n      // won't bother manually choosing a \"numeric\" cell type for each cell, and\r\n      // even if they did, choosing a \"numeric\" cell type every time wouldn't be an\r\n      // acceptable \"user experience\".\r\n      //\r\n      // So, if a cell value is supposed to be a string and Excel has automatically\r\n      // converted it to a number, perform a backwards conversion.\r\n      //\r\n      if (typeof value === 'number') {\r\n        // The global `isFinite()` function filters out:\r\n        // * NaN\r\n        // * -Infinity\r\n        // * Infinity\r\n        //\r\n        // All other values pass (including non-numbers).\r\n        //\r\n        if (isFinite(value)) {\r\n          return { value: String(value) }\r\n        }\r\n        return { error: 'invalid', reason: 'not_a_number' }\r\n      }\r\n      return { error: 'invalid', reason: 'not_a_string' }\r\n\r\n    case Number:\r\n    case Integer:\r\n      // An XLSX file editing software might not always correctly\r\n      // detect numeric values in string-type cells. Users won't bother\r\n      // manually selecting a cell type, so the editing software has to guess\r\n      // based on the user's input. One can assume that such auto-detection\r\n      // might not always work.\r\n      //\r\n      // So, if a cell is supposed to be a numeric one, convert a string value to a number.\r\n      //\r\n      if (typeof value === 'string') {\r\n        const stringifiedValue = value\r\n        value = Number(value)\r\n        if (String(value) !== stringifiedValue) {\r\n          return { error: 'invalid', reason: 'not_a_number_string' }\r\n        }\r\n      } else if (typeof value !== 'number') {\r\n        return { error: 'invalid', reason: 'not_a_number' }\r\n      }\r\n      // At this point, `value` can only be a number.\r\n      //\r\n      // The global `isFinite()` function filters out:\r\n      // * NaN\r\n      // * -Infinity\r\n      // * Infinity\r\n      //\r\n      // All other values pass (including non-numbers).\r\n      //\r\n      if (!isFinite(value)) {\r\n        return { error: 'invalid', reason: 'not_a_number' }\r\n      }\r\n      if (type === Integer && !isInteger(value)) {\r\n        return { error: 'invalid', reason: 'not_an_integer' }\r\n      }\r\n      return { value }\r\n\r\n    case URL:\r\n      if (typeof value === 'string') {\r\n        if (isURL(value)) {\r\n          return { value }\r\n        }\r\n        return { error: 'invalid', reason: 'not_a_url' }\r\n      }\r\n      return { error: 'invalid', reason: 'not_a_string' }\r\n\r\n    case Email:\r\n      if (typeof value === 'string') {\r\n        if (isEmail(value)) {\r\n          return { value }\r\n        }\r\n        return { error: 'invalid', reason: 'not_an_email' }\r\n      }\r\n      return { error: 'invalid', reason: 'not_a_string' }\r\n\r\n    case Date:\r\n      // XLSX has no specific format for dates.\r\n      // Sometimes a date can be heuristically detected.\r\n      // https://github.com/catamphetamine/read-excel-file/issues/3#issuecomment-395770777\r\n      if (value instanceof Date) {\r\n        if (isNaN(value)) {\r\n          return { error: 'invalid', reason: 'out_of_bounds' }\r\n        }\r\n        return { value }\r\n      }\r\n      if (typeof value === 'number') {\r\n        if (!isFinite(value)) {\r\n          return { error: 'invalid', reason: 'not_a_number' }\r\n        }\r\n        value = Number(value)\r\n        const date = parseDate(value, options.properties)\r\n        if (isNaN(date)) {\r\n          return { error: 'invalid', reason: 'out_of_bounds' }\r\n        }\r\n        return { value: date }\r\n      }\r\n      return { error: 'invalid', reason: 'not_a_number' }\r\n\r\n    case Boolean:\r\n      if (typeof value === 'boolean') {\r\n        return { value }\r\n      }\r\n      return { error: 'invalid', reason: 'not_a_boolean' }\r\n\r\n    default:\r\n      if (typeof type === 'function') {\r\n        return parseCustomValue(value, type)\r\n      }\r\n      throw new Error(`Unknown schema type: ${type && type.name || type}`)\r\n  }\r\n}\r\n\r\nexport function getBlock(string, endCharacter, startIndex) {\r\n  let i = 0\r\n  let substring = ''\r\n  let character\r\n  while (startIndex + i < string.length) {\r\n    const character = string[startIndex + i]\r\n    if (character === endCharacter) {\r\n      return [substring, i]\r\n    }\r\n    else if (character === '\"') {\r\n      const block = getBlock(string, '\"', startIndex + i + 1)\r\n      substring += block[0]\r\n      i += '\"'.length + block[1] + '\"'.length\r\n    }\r\n    else {\r\n      substring += character\r\n      i++\r\n    }\r\n  }\r\n  return [substring, i]\r\n}\r\n\r\n/**\r\n * Parses a string of comma-separated substrings into an array of substrings.\r\n * (the `export` is just for tests)\r\n * @param  {string} string — A string of comma-separated substrings.\r\n * @return {string[]} An array of substrings.\r\n */\r\nexport function parseArray(string) {\r\n  const blocks = []\r\n  let index = 0\r\n  while (index < string.length) {\r\n    const [substring, length] = getBlock(string, ',', index)\r\n    index += length + ','.length\r\n    blocks.push(substring.trim())\r\n  }\r\n  return blocks\r\n}\r\n\r\n// Transpose a 2D array.\r\n// https://stackoverflow.com/questions/17428587/transposing-a-2d-array-in-javascript\r\nconst transpose = array => array[0].map((_, i) => array.map(row => row[i]))\r\n\r\nfunction validateSchema(schema) {\r\n  for (const key of Object.keys(schema)) {\r\n    const entry = schema[key]\r\n    if (!entry.prop) {\r\n      throw new Error(`\"prop\" not defined for schema entry \"${key}\".`)\r\n    }\r\n  }\r\n}"],"mappings":"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"}